{"task_id": "test/0", "prompt": "Please complete the following code based on Fortran 90's function to achieve the described functionality, and you should give me the code without any other words.\n code:\"MODULE test_module\nCONTAINS \nFUNCTION has_close_elements(numbers, threshold) RESULT(result)\n!your code\nEND FUNCTION has_close_elements\nEND MODULE test_module \"\n functionality:\nCheck if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    F\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    T\n", "canonical_solution": "MODULE test_module\n    CONTAINS\n        FUNCTION has_close_elements(numbers, threshold) RESULT(result)\n        IMPLICIT NONE\n        REAL, DIMENSION(:), INTENT(IN) :: numbers\n        REAL,INTENT(IN) :: threshold \n        INTEGER :: size0, N, M\n        LOGICAL :: result\n        result = .FALSE.\n        size0 = SIZE(numbers)\n\n        DO N = 1, SIZE(numbers),1\n            DO M = N+1,size0,1\n                IF(ABS(numbers(M)-numbers(N))<threshold) THEN\n                    result = .TRUE.\n                    EXIT\n                    END IF\n                END DO\n            END DO\n        END FUNCTION has_close_elements\nEND MODULE test_module\n", "test": "PROGRAM main\n    USE test_module\n    IMPLICIT NONE\n    call test([1.0, 2.0, 3.0], 0.5, .false.)\n    call test([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3, .true.)\n    call test([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3, .true.)\n    call test([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05, .false.)\n    call test([1.0, 2.0, 5.9, 4.0, 5.0], 0.95, .True.)\n    call test([1.0, 2.0, 5.9, 4.0, 5.0], 0.8, .false.)\n    call test([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1, .true.)\n    call test([1.1, 2.2, 3.1, 4.1, 5.1], 1.0, .True.)\n    call test([1.1, 2.2, 3.1, 4.1, 5.1], 0.5, .false.)\n    contains\n    subroutine test (p1, p2, st)\n        implicit none\n            REAL, DIMENSION(:), INTENT(IN) :: p1\n            REAL, INTENT(IN) :: p2\n            logical, INTENT(IN) :: st\n            logical :: a\n            logical :: exists\n            inquire(file='result.txt', exist=exists)\n            a = has_close_elements(p1, p2)\n            if (a .eqv. st) then\n                if (exists) then\n                  open(1, file = 'result.txt', status='old')\n                else\n                  open(1, file = 'result.txt', status='new')\n                end if\n                write(1,*)'F', a, st\n            end if\n        end subroutine test\n\nEND PROGRAM main\n"}